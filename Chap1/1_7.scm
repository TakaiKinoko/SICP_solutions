#lang scheme

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))

(define (good-enough? guess x)
  (< (abs(- (* guess guess) x)) 0.001))

(define (improve guess x)
  (/ (+ guess (/ x guess)) 2))

(define (sqrt x)
  (sqrt-iter 1.0 x))


; define error rate as the proportion of the difference between guess^2 and x in x, which could be used as an indicator of
; proficiency of the algorithm above

(define (error-rate guess x) ( / (abs (- (* guess guess) x)) x))

;(error-rate (sqrt 900000000000000000000000000000000000000000000000000000000000000000000000000000000000) 900000000000000000000000000000000000000000000000000000000000000000000000000000000000)
(error-rate (sqrt 90000000000000000000000000000000000000000000000000000000000000000000000000000000000) 90000000000000000000000000000000000000000000000000000000000000000000000000000000000)
(error-rate (sqrt 1.8446744e+19) 1.8446744e+19)
(error-rate (sqrt 12345678901234567890) 12345678901234567890)
(error-rate (sqrt 4294967296) 4294967296)
(error-rate (sqrt 400000000) 400000000)
(error-rate (sqrt 40000) 40000)       ;
(error-rate (sqrt 400) 400)           ;
(error-rate (sqrt 4.0) 4.0)           ;9.292229696811205e-08
(error-rate (sqrt 1.0) 1.0)           ;0.0
(error-rate (sqrt 0.04) 0.04)         ;0.006108340352561567
(error-rate (sqrt 0.0036) 0.0036)     ;0.0893610737283289
(error-rate (sqrt 0.000004) 0.000004) ;243.80691351469855

;; We can observe how fast the error-rate grows to atrocity when the number gets as small as 10^(-6)
;; whereas when it gets as large as 900000000000000000000000000000000000000000000000000000000000000000000000000000000000, since Scheme operate on
;; a precision below the 0.001, the guesses generated by the sqrt procedure will never generate a good-enough? result, the procedure doesn't terminate.

(define (sqrt-iter-new guess x)
  (let ((newguess (improve guess x)))
  (if (good-enough-new? newguess guess)
      newguess
      (sqrt-iter-new newguess x))))

(define (good-enough-new? newguess oldguess)
  (< (/ (abs(- newguess oldguess)) oldguess) 0.01))

(define (sqrt-new x)
  (sqrt-iter-new 1.0 x))

(newline)
(error-rate (sqrt-new 900000000000000000000000000000000000000000000000000000000000000000000000000000000000) 900000000000000000000000000000000000000000000000000000000000000000000000000000000000)
(error-rate (sqrt-new 90000000000000000000000000000000000000000000000000000000000000000000000000000000000) 90000000000000000000000000000000000000000000000000000000000000000000000000000000000)
(error-rate (sqrt-new 1.8446744e+19) 1.8446744e+19)
(error-rate (sqrt-new 12345678901234567890) 12345678901234567890)
(error-rate (sqrt-new 4294967296) 4294967296)
(error-rate (sqrt-new 400000000) 400000000)
(error-rate (sqrt-new 40000) 40000)       ;
(error-rate (sqrt-new 400) 400)           ;
(error-rate (sqrt-new 4.0) 4.0)           ;9.292229696811205e-08
(error-rate (sqrt-new 1.0) 1.0)           ;0.0
(error-rate (sqrt-new 0.04) 0.04)         ;0.006108340352561567
(error-rate (sqrt-new 0.0036) 0.0036)     ;0.0893610737283289
(error-rate (sqrt-new 0.000004) 0.000004) ;243.80691351469855

; not only is the interpreter able to compute on all of these numbers, all results are within reasonale error range